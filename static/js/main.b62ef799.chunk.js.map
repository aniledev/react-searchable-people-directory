{"version":3,"sources":["Text.js","Card.js","MainContent.js","services.js","App.js","index.js"],"names":["EditableText","props","state","id","name","type","value","editClassName","field","edit","key","this","setState","className","autoFocus","onFocus","event","target","backup","onChange","onBlur","onKeyUp","updateUserField","onClick","React","Component","Text","styled","div","BoldText","GrayText","StyledImage","img","Card","user","cell","location","city","country","first","last","email","large","picture","nat","uuid","login","nameString","emailString","src","alt","countryCode","formattedNum","phone","phoneNumber","renderPhone","StyledCard","MainContent","users","input","byConditions","lowerCase","toLowerCase","matches","formattedInput","includes","matchesFirst","matchesLast","matchesCity","matchesCountry","matchesState","matchesEmail","matchesNum","replace","CardList","filter","map","uuidv4","fetch","data","json","StyledMain","StyledInput","App","useState","setUsers","setInput","useEffect","mounted","fetchList","then","results","handleInput","foundUser","split","updatedFirst","rest","join","updatedUsers","rootElement","document","getElementById","createRoot","render"],"mappings":"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","file":"static/js/main.b62ef799.chunk.js","sourcesContent":["import React from \"react\";\n\n// Created class fucntion in one of the components to demonstrate familiarity with class and functional components\nclass EditableText extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      id: props.id || \"\",\n      name: props.name,\n      type: props.type || \"text\",\n      value: props.value || \"\",\n      editClassName: props.editClassName,\n      field: props.field || \"\",\n      edit: false,\n      key: props.key\n    };\n  }\n\n  edit() {\n    this.setState({ edit: this.state.edit !== false });\n  }\n\n  // we only need to update the state when the enter happens\n  // pass in the id, the value, and the field to the function to update the state\n  render() {\n    return (\n      (this.state.edit === true && (\n        <input\n          key={this.state.key}\n          name={this.state.name}\n          type={this.state.type}\n          value={this.state.value}\n          className={this.state.editClassName}\n          autoFocus\n          onFocus={(event) => {\n            const value = event.target.value;\n            event.target.value = \"\";\n            event.target.value = value;\n            this.setState({ backup: this.state.value });\n          }}\n          onChange={(event) => {\n            this.setState({ value: event.target.value });\n          }}\n          onBlur={(event) => {\n            this.setState({ edit: false, value: this.state.backup });\n          }}\n          onKeyUp={(event) => {\n            if (event.key === \"Escape\") {\n              this.setState({ edit: false, value: this.state.backup });\n            }\n            if (event.key === \"Enter\") {\n              if (event.target.value) {\n                this.setState({ edit: false, value: this.state.value });\n                this.props.updateUserField(\n                  this.state.id,\n                  this.state.field,\n                  this.state.value\n                );\n                return;\n              }\n              this.setState({ edit: false, value: this.state.backup });\n              this.props.updateUserField(\n                this.state.id,\n                this.state.field,\n                this.state.backup\n              );\n            }\n          }}\n        />\n      )) || (\n        <span\n          onClick={(event) => {\n            this.setState({ edit: this.state.edit !== true });\n          }}\n        >\n          {this.state.value}\n        </span>\n      )\n    );\n  }\n}\n\nexport default EditableText;\n","import React from \"react\";\nimport EditableText from \"./Text\";\nimport styled from \"styled-components\";\nimport PropTypes from \"prop-types\";\nimport { phone } from \"phone\";\n\nconst Text = styled.div`\n  font-size: 0.9rem;\n  padding: 0.5rem 0.75rem;\n  text-align: center;\n`;\n\nconst BoldText = styled(Text)`\n  font-weight: 700;\n  font-size: 1.25rem;\n`;\n\nconst GrayText = styled(Text)`\n  color: gray;\n`;\n\nconst StyledImage = styled.img`\n  margin: 0.5rem 0;\n  width: 100px;\n  height: 100px;\n  border-radius: 50%;\n`;\n\nconst Card = ({\n  key,\n  className,\n  updateUserField,\n  user: {\n    cell,\n    location: { city, state, country },\n    name: { first, last },\n    email,\n    picture: { large },\n    nat,\n    login: { uuid }\n  }\n}) => {\n  const renderLocation = () => {\n    return country === \"United States\" ? (\n      <>\n        <EditableText\n          id={uuid}\n          field=\"city\"\n          key={key}\n          editClassName=\"form-control\"\n          value={city}\n          updateUserField={updateUserField}\n        />\n        {\", \"}\n        <EditableText\n          id={uuid}\n          field=\"state\"\n          key={key}\n          editClassName=\"form-control\"\n          value={state}\n          updateUserField={updateUserField}\n        />\n      </>\n    ) : (\n      <>\n        <EditableText\n          id={uuid}\n          field=\"city\"\n          key={key}\n          editClassName=\"form-control\"\n          value={city}\n          updateUserField={updateUserField}\n        />\n        {\", \"}\n        <EditableText\n          id={uuid}\n          field=\"country\"\n          key={key}\n          editClassName=\"form-control\"\n          value={country}\n          updateUserField={updateUserField}\n        />\n      </>\n    );\n  };\n\n  const renderPhone = () => {\n    const countryCode = nat ? nat : null;\n    const formattedNum = phone(cell, { country: countryCode }).phoneNumber;\n    return formattedNum ? formattedNum : cell;\n  };\n\n  const nameString = first && last ? `${first} ${last}` : \"\";\n  const emailString = email ? email : \"\";\n\n  return (\n    <div className={className}>\n      <StyledImage src={large} alt=\"Girl in a jacket\" />\n      <BoldText>\n        <EditableText\n          id={uuid}\n          key={key}\n          editClassName=\"form-control\"\n          value={nameString}\n          field=\"name\"\n          updateUserField={updateUserField}\n        />\n      </BoldText>\n      <GrayText>{renderLocation()}</GrayText>\n      <GrayText>\n        <EditableText\n          id={uuid}\n          key={key}\n          editClassName=\"form-control\"\n          value={renderPhone()}\n          field=\"cell\"\n          updateUserField={updateUserField}\n        />\n      </GrayText>\n      <GrayText>\n        <EditableText\n          id={uuid}\n          key={key}\n          editClassName=\"form-control\"\n          value={emailString}\n          field=\"email\"\n          updateUserField={updateUserField}\n        />\n      </GrayText>\n    </div>\n  );\n};\n\nCard.propTypes = {\n  className: PropTypes.string,\n  user: PropTypes.object,\n  updateUserField: PropTypes.func\n};\n\nexport default Card;\n","import React from \"react\";\nimport Card from \"./Card\";\nimport styled from \"styled-components\";\nimport PropTypes from \"prop-types\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nconst StyledCard = styled(Card)`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  height: 16rem;\n  padding: 0.5rem 0;\n  width: 20%;\n  margin: 10px;\n  box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 8px;\n  border-radius: 5%;\n`;\n\nconst MainContent = ({ className, users, input, updateUserField }) => {\n  // This could be replaced by doing some fancy object nesting checks, but just for simplicity and sake of time, this will do for now\n  const byConditions = (value) => {\n    const lowerCase = (value) => {\n      return value.toLowerCase();\n    };\n\n    const matches = (value) => {\n      const formattedInput = input.toLowerCase();\n      return value.includes(formattedInput);\n    };\n\n    const matchesFirst = matches(lowerCase(value.name?.first));\n    const matchesLast = matches(lowerCase(value.name?.last));\n    const matchesCity = matches(lowerCase(value.location?.city));\n    const matchesCountry = matches(lowerCase(value.location?.country));\n    const matchesState = matches(lowerCase(value.location?.state));\n    const matchesEmail = matches(lowerCase(value.email));\n    const matchesNum = matches(\n      lowerCase(value.cell.replace(/[^a-z0-9]/gi, \"\"))\n    );\n\n    return (\n      matchesFirst ||\n      matchesLast ||\n      matchesCity ||\n      matchesCountry ||\n      matchesState ||\n      matchesEmail ||\n      matchesNum\n    );\n  };\n\n  // Filter the list of users based on the conditions and user input\n  const filterUsers = () => {\n    return input ? users.filter(byConditions) : users;\n  };\n\n  // Generate the list of cards\n  const CardList = () => {\n    return filterUsers().map((user) => (\n      <StyledCard\n        key={uuidv4()}\n        user={user}\n        updateUserField={updateUserField}\n      />\n    ));\n  };\n\n  return (\n    <div className={className}>\n      <CardList />\n    </div>\n  );\n};\n\nMainContent.propTypes = {\n  className: PropTypes.string,\n  users: PropTypes.array,\n  input: PropTypes.string,\n  updateUserField: PropTypes.func\n};\n\nexport default MainContent;\n","export async function fetchList() {\n  // For the sake of the example, hardcoded 100 profiles\n  const data = await fetch(\"https://randomuser.me/api/?results=100\");\n  return await data.json();\n}\n","import React, { useState, useEffect } from \"react\";\nimport MainContent from \"./MainContent\";\nimport styled from \"styled-components\";\nimport \"./styles.css\";\nimport { fetchList } from \"../src/services\";\nimport { phone } from \"phone\";\n\nconst StyledMain = styled(MainContent)`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  width: 100%;\n  margin-left: 6rem;\n  margin-top: 6rem;\n`;\n\nconst StyledInput = styled.input`\n  display: flex;\n  flex-direction: column;\n  width: 75%;\n  margin: 10rem auto 0 auto;\n  font-size: 2rem;\n  border-radius: 0.5rem;\n  border: 1px solid lightgray;\n  box-shadow: rgba(0, 0, 0, 0.35) 0px 5px 15px;\n`;\n\nconst App = () => {\n  // Hooks state management\n  const [users, setUsers] = useState([]);\n  const [input, setInput] = useState(\"\");\n\n  // Use effect to fetch the list of users from the api\n  useEffect(() => {\n    let mounted = true;\n    fetchList().then((data) => {\n      if (mounted) {\n        setUsers(data.results);\n      }\n    });\n    // Clean up side effects\n    return () => (mounted = false);\n  }, []);\n\n  // on change of the field we need to update the state\n  const handleInput = (event) => {\n    setInput(event.target.value);\n  };\n\n  const updateUserField = (id, field, value) => {\n    const foundUser = users.filter(({ login: { uuid } }) => uuid === id)[0];\n    const isLocationField =\n      field === \"city\" || field === \"state\" || field === \"country\";\n\n    if (isLocationField) {\n      foundUser[\"location\"][field] = value;\n    }\n\n    if (field === \"name\") {\n      const [updatedFirst, ...rest] = value.split(\" \");\n      foundUser[field][\"first\"] = updatedFirst;\n      foundUser[field][\"last\"] = rest.join(\" \");\n    }\n\n    if (field === \"cell\") {\n      const formattedNum = phone(value, { country: foundUser.nat }).phoneNumber;\n      foundUser[field] = formattedNum ? formattedNum : value;\n    }\n\n    // A package could be used here to validate the email and to provide a type of validation message\n    // but for the sake of thi project, I kept it simple\n    if (field === \"email\") {\n      foundUser[field] = value;\n    }\n\n    const updatedUsers = users.map((user) => {\n      if (user.login.uuid === id) {\n        return foundUser;\n      }\n      return user;\n    });\n\n    setUsers(updatedUsers);\n  };\n\n  return (\n    <div className=\"App\">\n      <StyledInput\n        type=\"text\"\n        id=\"search\"\n        name=\"search\"\n        value={input}\n        onChange={(event) => handleInput(event)}\n      />\n      <StyledMain\n        users={users}\n        input={input}\n        updateUserField={updateUserField}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","import { StrictMode } from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\n\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>\n);\n"],"sourceRoot":""}